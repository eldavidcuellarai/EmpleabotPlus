// EmpleabotPlus Chat Integration - Conectado con Azure OpenAI\nclass EmpleabotChat {\n    constructor() {\n        this.chatbotBubble = document.getElementById('chatbot-bubble');\n        this.chatbotPanel = document.getElementById('chatbot-panel');\n        this.chatbotMessages = document.getElementById('chatbot-messages');\n        this.userInput = document.getElementById('user-input');\n        this.sendButton = document.getElementById('send-message');\n        this.fileUploadBtn = document.getElementById('file-upload-btn');\n        this.fileUpload = document.getElementById('file-upload');\n        this.closeBtn = document.getElementById('close-chatbot');\n        this.expandBtn = document.getElementById('expand-chatbot');\n        \n        this.isActive = false;\n        this.isFullscreen = false;\n        this.currentFile = null;\n        \n        this.init();\n    }\n    \n    init() {\n        if (!this.chatbotBubble || !this.chatbotPanel) {\n            console.warn('Chatbot elements not found');\n            return;\n        }\n        \n        this.bindEvents();\n        this.showWelcomeMessage();\n    }\n    \n    bindEvents() {\n        // Toggle chatbot\n        this.chatbotBubble?.addEventListener('click', () => this.toggleChatbot());\n        this.closeBtn?.addEventListener('click', () => this.closeChatbot());\n        this.expandBtn?.addEventListener('click', () => this.toggleFullscreen());\n        \n        // Send message events\n        this.sendButton?.addEventListener('click', () => this.sendMessage());\n        this.userInput?.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                this.sendMessage();\n            }\n        });\n        \n        // File upload events\n        this.fileUploadBtn?.addEventListener('click', () => this.fileUpload?.click());\n        this.fileUpload?.addEventListener('change', (e) => this.handleFileUpload(e));\n        \n        // Close chatbot when clicking outside\n        document.addEventListener('click', (e) => {\n            if (this.isActive && !this.chatbotPanel.contains(e.target) && !this.chatbotBubble.contains(e.target)) {\n                // Don't close if clicking inside the panel or bubble\n                return;\n            }\n        });\n    }\n    \n    toggleChatbot() {\n        this.isActive = !this.isActive;\n        this.chatbotPanel.classList.toggle('active', this.isActive);\n        \n        if (this.isActive) {\n            this.userInput?.focus();\n        }\n    }\n    \n    closeChatbot() {\n        this.isActive = false;\n        this.chatbotPanel.classList.remove('active');\n        if (this.isFullscreen) {\n            this.toggleFullscreen();\n        }\n    }\n    \n    toggleFullscreen() {\n        this.isFullscreen = !this.isFullscreen;\n        this.chatbotPanel.classList.toggle('fullscreen', this.isFullscreen);\n        \n        const expandIcon = this.expandBtn?.querySelector('i');\n        if (expandIcon) {\n            expandIcon.setAttribute('data-feather', this.isFullscreen ? 'minimize-2' : 'maximize-2');\n            if (typeof feather !== 'undefined') {\n                feather.replace();\n            }\n        }\n    }\n    \n    showWelcomeMessage() {\n        setTimeout(() => {\n            this.addMessage(\n                'Â¡Hola! Soy Empleabot ðŸ¤– Tu asistente de IA para el empleo. Puedo ayudarte con:\\n\\n' +\n                'â€¢ OptimizaciÃ³n de CV\\n' +\n                'â€¢ Consejos para entrevistas\\n' +\n                'â€¢ Cursos recomendados\\n' +\n                'â€¢ Habilidades digitales\\n\\n' +\n                'Â¿En quÃ© puedo ayudarte hoy?',\n                'bot'\n            );\n            \n            this.addSuggestedQuestions([\n                'Â¿CÃ³mo optimizar mi CV?',\n                'Consejos para entrevistas',\n                'Cursos recomendados',\n                'Habilidades mÃ¡s demandadas'\n            ]);\n        }, 500);\n    }\n    \n    async sendMessage() {\n        const message = this.userInput?.value.trim();\n        if (!message && !this.currentFile) return;\n        \n        // Disable send button\n        this.setSendButtonState(false);\n        \n        // Add user message\n        if (message) {\n            this.addMessage(message, 'user');\n        }\n        \n        // Add file message if there's a file\n        if (this.currentFile) {\n            this.addFileMessage(this.currentFile);\n        }\n        \n        // Clear input\n        if (this.userInput) {\n            this.userInput.value = '';\n        }\n        \n        // Show loading message\n        const loadingMsg = this.addMessage('Empleabot estÃ¡ pensando...', 'loading');\n        \n        try {\n            // Send to Flask backend\n            const formData = new FormData();\n            if (message) {\n                formData.append('message', message);\n            }\n            if (this.currentFile) {\n                formData.append('file', this.currentFile);\n            }\n            \n            const response = await fetch('/chat', {\n                method: 'POST',\n                body: formData\n            });\n            \n            const data = await response.json();\n            \n            // Remove loading message\n            this.removeMessage(loadingMsg);\n            \n            if (response.ok && data.response) {\n                // Process the response for artifacts\n                this.processAndDisplayResponse(data.response);\n            } else {\n                this.addMessage(\n                    data.error || 'Lo siento, ocurriÃ³ un error. Por favor, intenta de nuevo.',\n                    'error'\n                );\n            }\n        } catch (error) {\n            console.error('Chat error:', error);\n            this.removeMessage(loadingMsg);\n            this.addMessage(\n                'Error de conexiÃ³n. Por favor, verifica tu conexiÃ³n a internet e intenta de nuevo.',\n                'error'\n            );\n        }\n        \n        // Reset file\n        this.currentFile = null;\n        if (this.fileUpload) {\n            this.fileUpload.value = '';\n        }\n        \n        // Re-enable send button\n        this.setSendButtonState(true);\n    }\n    \n    processAndDisplayResponse(response) {\n        // Check for artifacts in the response\n        const artifactMatch = response.match(/---ARTIFACTS-START---(.*?)---ARTIFACTS-END---/s);\n        \n        let mainResponse = response;\n        let artifacts = null;\n        \n        if (artifactMatch) {\n            // Extract main response (before artifacts)\n            mainResponse = response.substring(0, artifactMatch.index).trim();\n            \n            // Extract and parse artifacts\n            try {\n                artifacts = JSON.parse(artifactMatch[1].trim());\n            } catch (e) {\n                console.error('Error parsing artifacts:', e);\n            }\n            \n            // Add remaining response after artifacts\n            const afterArtifacts = response.substring(artifactMatch.index + artifactMatch[0].length).trim();\n            if (afterArtifacts) {\n                mainResponse += '\\n\\n' + afterArtifacts;\n            }\n        }\n        \n        // Add main response\n        if (mainResponse) {\n            this.addMessage(mainResponse, 'bot');\n        }\n        \n        // Add artifacts if any\n        if (artifacts && artifacts.artifacts) {\n            artifacts.artifacts.forEach(artifact => {\n                this.addArtifact(artifact);\n            });\n        }\n        \n        // Extract and add suggested questions from response\n        this.extractAndAddSuggestedQuestions(response);\n    }\n    \n    addMessage(text, type = 'bot') {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `message ${type}`;\n        \n        const messageText = document.createElement('div');\n        messageText.className = 'message-text';\n        \n        if (type === 'bot' && typeof window.renderMarkdown === 'function') {\n            messageText.innerHTML = window.renderMarkdown(text);\n        } else {\n            messageText.textContent = text;\n        }\n        \n        messageDiv.appendChild(messageText);\n        this.chatbotMessages?.appendChild(messageDiv);\n        this.scrollToBottom();\n        \n        return messageDiv;\n    }\n    \n    addFileMessage(file) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'message file';\n        \n        const fileInfo = document.createElement('div');\n        fileInfo.className = 'file-info';\n        fileInfo.innerHTML = `\n            <i data-feather=\"file\" class=\"file-icon\"></i>\n            <span class=\"file-name\">${file.name}</span>\n        `;\n        \n        messageDiv.appendChild(fileInfo);\n        this.chatbotMessages?.appendChild(messageDiv);\n        \n        // Re-initialize feather icons\n        if (typeof feather !== 'undefined') {\n            feather.replace();\n        }\n        \n        this.scrollToBottom();\n        return messageDiv;\n    }\n    \n    addArtifact(artifact) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'message bot';\n        \n        const artifactContainer = document.createElement('div');\n        artifactContainer.className = 'artifact-container';\n        \n        const artifactHeader = document.createElement('div');\n        artifactHeader.className = 'artifact-header';\n        artifactHeader.textContent = artifact.title || `Documento ${artifact.type.toUpperCase()}`;\n        \n        const artifactContent = document.createElement('div');\n        artifactContent.className = 'artifact-content';\n        \n        if (artifact.type === 'html') {\n            // Create iframe for HTML content\n            const iframe = document.createElement('iframe');\n            iframe.srcdoc = artifact.content;\n            iframe.style.width = '100%';\n            iframe.style.height = '400px';\n            iframe.style.border = 'none';\n            artifactContent.appendChild(iframe);\n        } else {\n            // For other types, show as text\n            const pre = document.createElement('pre');\n            pre.style.whiteSpace = 'pre-wrap';\n            pre.style.padding = '10px';\n            pre.style.fontSize = '12px';\n            pre.textContent = artifact.content;\n            artifactContent.appendChild(pre);\n        }\n        \n        artifactContainer.appendChild(artifactHeader);\n        artifactContainer.appendChild(artifactContent);\n        messageDiv.appendChild(artifactContainer);\n        \n        this.chatbotMessages?.appendChild(messageDiv);\n        this.scrollToBottom();\n    }\n    \n    extractAndAddSuggestedQuestions(response) {\n        // Look for suggested questions in the format [text](acciÃ³n:action)\n        const suggestionRegex = /\\[([^\\]]+)\\]\\(acciÃ³n:([^)]+)\\)/g;\n        const suggestions = [];\n        let match;\n        \n        while ((match = suggestionRegex.exec(response)) !== null) {\n            suggestions.push(match[1]);\n        }\n        \n        if (suggestions.length > 0) {\n            this.addSuggestedQuestions(suggestions);\n        }\n    }\n    \n    addSuggestedQuestions(questions) {\n        if (!questions || questions.length === 0) return;\n        \n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'message bot';\n        \n        const questionsContainer = document.createElement('div');\n        questionsContainer.className = 'suggested-questions-container';\n        \n        questions.forEach((question, index) => {\n            const chip = document.createElement('button');\n            chip.className = 'suggested-question-chip';\n            chip.textContent = question;\n            chip.addEventListener('click', () => {\n                if (this.userInput) {\n                    this.userInput.value = question;\n                    this.sendMessage();\n                }\n            });\n            questionsContainer.appendChild(chip);\n        });\n        \n        messageDiv.appendChild(questionsContainer);\n        this.chatbotMessages?.appendChild(messageDiv);\n        this.scrollToBottom();\n    }\n    \n    handleFileUpload(event) {\n        const file = event.target.files[0];\n        if (!file) return;\n        \n        // Validate file type\n        if (file.type !== 'application/pdf') {\n            alert('Solo se permiten archivos PDF');\n            return;\n        }\n        \n        // Validate file size (max 16MB)\n        if (file.size > 16 * 1024 * 1024) {\n            alert('El archivo es demasiado grande. MÃ¡ximo 16MB.');\n            return;\n        }\n        \n        this.currentFile = file;\n        \n        // Update UI to show file is selected\n        if (this.fileUploadBtn) {\n            this.fileUploadBtn.style.color = 'var(--highlight-color)';\n            this.fileUploadBtn.title = `Archivo seleccionado: ${file.name}`;\n        }\n    }\n    \n    removeMessage(messageElement) {\n        if (messageElement && messageElement.parentNode) {\n            messageElement.parentNode.removeChild(messageElement);\n        }\n    }\n    \n    setSendButtonState(enabled) {\n        if (this.sendButton) {\n            this.sendButton.disabled = !enabled;\n        }\n    }\n    \n    scrollToBottom() {\n        if (this.chatbotMessages) {\n            this.chatbotMessages.scrollTop = this.chatbotMessages.scrollHeight;\n        }\n    }\n}\n\n// Initialize chatbot when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Wait a bit to ensure all elements are ready\n    setTimeout(() => {\n        window.empleabotChat = new EmpleabotChat();\n    }, 100);\n});"