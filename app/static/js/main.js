// EmpleabotPlus Main JavaScript - Simple and Functional\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('EmpleabotPlus loaded successfully');\n    \n    // Initialize Feather Icons (if available)\n    try {\n        if (typeof feather !== 'undefined') {\n            feather.replace();\n        }\n    } catch (e) {\n        console.log('Feather icons not loaded, using text fallbacks');\n    }\n    \n    // Initialize markdown (if available)\n    try {\n        if (typeof marked !== 'undefined') {\n            marked.setOptions({\n                breaks: true,\n                gfm: true\n            });\n            window.renderMarkdown = function(text) {\n                try {\n                    return marked.parse(text);\n                } catch (e) {\n                    return text.replace(/\\n/g, '<br>');\n                }\n            };\n        } else {\n            window.renderMarkdown = function(text) {\n                return text.replace(/\\n/g, '<br>');\n            };\n        }\n    } catch (e) {\n        window.renderMarkdown = function(text) {\n            return text.replace(/\\n/g, '<br>');\n        };\n    }\n    \n    // Search functionality\n    initSearchFunctionality();\n    \n    // FAQ slider\n    initFAQSlider();\n    \n    // Courses slider\n    initCoursesSlider();\n    \n    // Tabs functionality\n    initTabs();\n    \n    // Re-initialize icons after DOM changes\n    setTimeout(() => {\n        try {\n            if (typeof feather !== 'undefined') {\n                feather.replace();\n            }\n        } catch (e) {\n            // Ignore error\n        }\n    }, 500);\n});\n\nfunction initSearchFunctionality() {\n    const searchInput = document.querySelector('.search-input');\n    const searchButton = document.querySelector('.search-button');\n    \n    if (searchInput && searchButton) {\n        function handleSearch() {\n            const question = searchInput.value.trim();\n            if (question) {\n                // Try to connect to chatbot\n                const chatbotPanel = document.getElementById('chatbot-panel');\n                const chatbotBubble = document.getElementById('chatbot-bubble');\n                \n                if (chatbotPanel && chatbotBubble && window.empleabotChat) {\n                    // Activate chatbot and send message\n                    if (!chatbotPanel.classList.contains('active')) {\n                        chatbotBubble.click();\n                    }\n                    \n                    setTimeout(() => {\n                        const userInput = document.getElementById('user-input');\n                        const sendMessageBtn = document.getElementById('send-message');\n                        if (userInput && sendMessageBtn) {\n                            userInput.value = question;\n                            sendMessageBtn.click();\n                        }\n                    }, 300);\n                    \n                    searchInput.value = '';\n                } else {\n                    // Fallback: show alert\n                    alert('Chatbot no disponible. Pregunta: ' + question);\n                    searchInput.value = '';\n                }\n            }\n        }\n        \n        searchButton.addEventListener('click', handleSearch);\n        searchInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                handleSearch();\n            }\n        });\n    }\n}\n\nfunction initFAQSlider() {\n    const faqSlider = document.querySelector('.faq-slider');\n    const prevBtn = document.getElementById('prev-faq');\n    const nextBtn = document.getElementById('next-faq');\n    const faqCards = document.querySelectorAll('.faq-card');\n    \n    if (faqSlider && prevBtn && nextBtn && faqCards.length > 0) {\n        let currentPosition = 0;\n        let visibleCards = getVisibleCards();\n        \n        function getVisibleCards() {\n            if (window.innerWidth <= 768) return 1;\n            if (window.innerWidth <= 992) return 2;\n            return 3;\n        }\n        \n        function updateNavigationButtons() {\n            const maxPosition = Math.max(0, faqCards.length - visibleCards);\n            \n            prevBtn.style.opacity = currentPosition <= 0 ? '0.5' : '1';\n            prevBtn.style.pointerEvents = currentPosition <= 0 ? 'none' : 'auto';\n            \n            nextBtn.style.opacity = currentPosition >= maxPosition ? '0.5' : '1';\n            nextBtn.style.pointerEvents = currentPosition >= maxPosition ? 'none' : 'auto';\n        }\n        \n        function slideToPosition(position) {\n            const maxPosition = Math.max(0, faqCards.length - visibleCards);\n            currentPosition = Math.max(0, Math.min(position, maxPosition));\n            \n            const cardWidth = faqCards[0].offsetWidth + 15; // Include gap\n            faqSlider.scrollTo({\n                left: currentPosition * cardWidth,\n                behavior: 'smooth'\n            });\n            \n            updateNavigationButtons();\n        }\n        \n        function handleResize() {\n            visibleCards = getVisibleCards();\n            updateNavigationButtons();\n        }\n        \n        // Event listeners\n        prevBtn.addEventListener('click', () => {\n            slideToPosition(currentPosition - 1);\n        });\n        \n        nextBtn.addEventListener('click', () => {\n            slideToPosition(currentPosition + 1);\n        });\n        \n        window.addEventListener('resize', handleResize);\n        \n        // Make FAQ cards clickable\n        faqCards.forEach(card => {\n            card.addEventListener('click', () => {\n                const question = card.querySelector('h3')?.textContent;\n                if (question) {\n                    const chatbotPanel = document.getElementById('chatbot-panel');\n                    const chatbotBubble = document.getElementById('chatbot-bubble');\n                    \n                    if (chatbotPanel && chatbotBubble && window.empleabotChat) {\n                        if (!chatbotPanel.classList.contains('active')) {\n                            chatbotBubble.click();\n                        }\n                        \n                        setTimeout(() => {\n                            const userInput = document.getElementById('user-input');\n                            const sendMessageBtn = document.getElementById('send-message');\n                            if (userInput && sendMessageBtn) {\n                                userInput.value = question;\n                                sendMessageBtn.click();\n                            }\n                        }, 300);\n                    }\n                }\n            });\n        });\n        \n        // Initialize\n        updateNavigationButtons();\n    }\n}\n\nfunction initCoursesSlider() {\n    const cursosContainers = document.querySelectorAll('.tab-content');\n    \n    cursosContainers.forEach(container => {\n        const cursosGrid = container.querySelector('.cursos-grid');\n        const prevBtn = container.querySelector('.cursos-prev');\n        const nextBtn = container.querySelector('.cursos-next');\n        const cards = cursosGrid?.querySelectorAll('.curso-card');\n        \n        if (cursosGrid && prevBtn && nextBtn && cards && cards.length > 0) {\n            let currentPos = 0;\n            \n            function getVisibleCards() {\n                if (window.innerWidth <= 768) return 1;\n                if (window.innerWidth <= 1200) return 2;\n                return 3;\n            }\n            \n            function updateNavButtons() {\n                const visibleCards = getVisibleCards();\n                const maxPos = Math.max(0, cards.length - visibleCards);\n                \n                prevBtn.style.opacity = currentPos <= 0 ? '0.5' : '1';\n                prevBtn.style.pointerEvents = currentPos <= 0 ? 'none' : 'auto';\n                \n                nextBtn.style.opacity = currentPos >= maxPos ? '0.5' : '1';\n                nextBtn.style.pointerEvents = currentPos >= maxPos ? 'none' : 'auto';\n            }\n            \n            function slideToCard(index) {\n                const visibleCards = getVisibleCards();\n                const maxPos = Math.max(0, cards.length - visibleCards);\n                currentPos = Math.max(0, Math.min(index, maxPos));\n                \n                const cardWidth = cards[0].offsetWidth + 24; // Include gap\n                container.scrollTo({\n                    left: currentPos * cardWidth,\n                    behavior: 'smooth'\n                });\n                \n                updateNavButtons();\n            }\n            \n            function handleResize() {\n                updateNavButtons();\n            }\n            \n            // Event listeners\n            prevBtn.addEventListener('click', () => {\n                slideToCard(currentPos - 1);\n            });\n            \n            nextBtn.addEventListener('click', () => {\n                slideToCard(currentPos + 1);\n            });\n            \n            window.addEventListener('resize', handleResize);\n            \n            // Initialize\n            updateNavButtons();\n        }\n    });\n}\n\nfunction initTabs() {\n    const tabButtons = document.querySelectorAll('.tab-button');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    if (tabButtons.length > 0 && tabContents.length > 0) {\n        // Set first tab as active by default\n        if (tabButtons[0] && tabContents[0]) {\n            tabButtons[0].classList.add('active');\n            tabContents[0].classList.add('active');\n        }\n        \n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const targetId = button.getAttribute('data-target');\n                if (!targetId) return;\n                \n                // Remove active class from all buttons and contents\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                tabContents.forEach(content => content.classList.remove('active'));\n                \n                // Add active class to clicked button\n                button.classList.add('active');\n                \n                // Show corresponding content\n                const targetContent = document.getElementById(targetId + '-content');\n                if (targetContent) {\n                    targetContent.classList.add('active');\n                    \n                    // Reinitialize sliders for this tab\n                    setTimeout(() => {\n                        initCoursesSlider();\n                    }, 100);\n                }\n            });\n        });\n    }\n}\n\n// Utility functions\nfunction safeExecute(fn, context = 'unknown') {\n    try {\n        return fn();\n    } catch (error) {\n        console.log(`Error in ${context}:`, error);\n        return null;\n    }\n}\n\n// Export for use by other scripts\nwindow.EmpleabotMainJS = {\n    initSearchFunctionality,\n    initFAQSlider,\n    initCoursesSlider,\n    initTabs\n};"