document.addEventListener('DOMContentLoaded', function() {\n\n    // Inicializar Feather Icons\n    if (typeof feather !== 'undefined') {\n        feather.replace();\n    }\n    \n    // Initialize markdown rendering\n    if (typeof marked !== 'undefined') {\n        marked.setOptions({\n            breaks: true,\n            gfm: true\n        });\n    }\n    \n    // Connect search form to chatbot\n    const searchInput = document.querySelector('.search-input');\n    const searchButton = document.querySelector('.search-button');\n    \n    if (searchInput && searchButton) {\n        // Handle search button click\n        searchButton.addEventListener('click', function() {\n            const question = searchInput.value.trim();\n            if (question) {\n                // Connect to chatbot\n                const chatbotPanel = document.getElementById('chatbot-panel');\n                const chatbotBubble = document.getElementById('chatbot-bubble');\n                if (chatbotPanel && chatbotBubble) {\n                    // Activate the chatbot if not already active\n                    if (!chatbotPanel.classList.contains('active')) {\n                        chatbotBubble.click();\n                    }\n                    \n                    // Set the question in the input and send it\n                    const userInput = document.getElementById('user-input');\n                    const sendMessageBtn = document.getElementById('send-message');\n                    if (userInput && sendMessageBtn) {\n                        userInput.value = question;\n                        // Trigger the send button click\n                        sendMessageBtn.click();\n                    }\n                    \n                    // Clear the search input\n                    searchInput.value = '';\n                }\n            }\n        });\n        \n        // Handle enter key press\n        searchInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                searchButton.click();\n            }\n        });\n    }\n    \n    // ===== FAQ SLIDER FUNCTIONALITY =====\n    const faqSlider = document.querySelector('.faq-slider');\n    const prevBtn = document.getElementById('prev-faq');\n    const nextBtn = document.getElementById('next-faq');\n    const faqCards = document.querySelectorAll('.faq-card');\n    \n    if (faqSlider && prevBtn && nextBtn) {\n        let currentPosition = 0;\n        let cardWidth = 0;\n        let visibleCards = 3;\n        \n        // Update values on resize\n        function updateSliderValues() {\n            if (window.innerWidth <= 768) {\n                visibleCards = 1;\n            } else if (window.innerWidth <= 992) {\n                visibleCards = 2;\n            } else {\n                visibleCards = 3;\n            }\n            \n            cardWidth = faqSlider.offsetWidth / visibleCards;\n            \n            // Adjust current position if needed\n            const maxPosition = faqCards.length - visibleCards;\n            if (currentPosition > maxPosition) {\n                currentPosition = maxPosition;\n                updateSliderPosition();\n            } else {\n                updateNavigationButtons();\n            }\n        }\n        \n        // Function to update slider position\n        function updateSliderPosition() {\n            faqSlider.scrollLeft = currentPosition * cardWidth;\n            updateNavigationButtons();\n        }\n        \n        // Function to update navigation button states\n        function updateNavigationButtons() {\n            const maxPosition = faqCards.length - visibleCards;\n            \n            // Update previous button\n            if (currentPosition <= 0) {\n                prevBtn.classList.add('disabled');\n            } else {\n                prevBtn.classList.remove('disabled');\n            }\n            \n            // Update next button\n            if (currentPosition >= maxPosition) {\n                nextBtn.classList.add('disabled');\n            } else {\n                nextBtn.classList.remove('disabled');\n            }\n        }\n        \n        // Initialize\n        updateSliderValues();\n        updateNavigationButtons();\n        \n        // Add click event listeners to navigation buttons\n        prevBtn.addEventListener('click', () => {\n            if (currentPosition > 0) {\n                currentPosition--;\n                updateSliderPosition();\n            }\n        });\n        \n        nextBtn.addEventListener('click', () => {\n            if (currentPosition < (faqCards.length - visibleCards)) {\n                currentPosition++;\n                updateSliderPosition();\n            }\n        });\n        \n        // Update values on window resize\n        window.addEventListener('resize', updateSliderValues);\n        \n        // Make FAQ cards clickable to send questions to chat\n        faqCards.forEach(card => {\n            card.addEventListener('click', () => {\n                const question = card.querySelector('h3').textContent;\n                \n                // If we have an empleabot chat widget\n                const chatbotPanel = document.getElementById('chatbot-panel');\n                const chatbotBubble = document.getElementById('chatbot-bubble');\n                \n                if (chatbotPanel && chatbotBubble) {\n                    // Activate the chatbot if not already active\n                    if (!chatbotPanel.classList.contains('active')) {\n                        chatbotBubble.click();\n                    }\n                    \n                    // Set the question in the input and send it\n                    const userInput = document.getElementById('user-input');\n                    const sendMessageBtn = document.getElementById('send-message');\n                    \n                    if (userInput && sendMessageBtn) {\n                        userInput.value = question;\n                        // Trigger the send button click\n                        sendMessageBtn.click();\n                    }\n                }\n            });\n        });\n    }\n    \n    // ===== CURSOS SLIDER FUNCTIONALITY =====\n    const sliderUpdaters = {};\n    const cursosTabContents = document.querySelectorAll('.tab-content');\n\n    cursosTabContents.forEach(tab => {\n        const cursosGrid = tab.querySelector('.cursos-grid');\n        const prevBtnCursos = tab.querySelector('.cursos-prev');\n        const nextBtnCursos = tab.querySelector('.cursos-next');\n        const cursosCards = cursosGrid ? tab.querySelectorAll('.curso-card') : null;\n\n        if (cursosGrid && prevBtnCursos && nextBtnCursos && cursosCards.length) {\n            let cursosCurrentPos = 0;\n            let visibleCards = 3;\n            \n            function updateVisibleCards() {\n                if (window.innerWidth <= 500) {\n                    visibleCards = 1;\n                } else if (window.innerWidth <= 768) {\n                    visibleCards = 1;\n                } else if (window.innerWidth <= 1200) {\n                    visibleCards = 2;\n                } else {\n                    visibleCards = 3;\n                }\n                \n                visibleCards = Math.max(1, visibleCards);\n                updateNavButtons();\n            }\n            \n            function updateNavButtons() {\n                prevBtnCursos.classList.toggle('disabled', cursosCurrentPos === 0);\n                nextBtnCursos.classList.toggle('disabled', cursosCurrentPos >= cursosCards.length - visibleCards);\n                \n                prevBtnCursos.style.opacity = cursosCurrentPos === 0 ? '0.5' : '1';\n                prevBtnCursos.style.pointerEvents = cursosCurrentPos === 0 ? 'none' : 'auto';\n                nextBtnCursos.style.opacity = cursosCurrentPos >= cursosCards.length - visibleCards ? '0.5' : '1';\n                nextBtnCursos.style.pointerEvents = cursosCurrentPos >= cursosCards.length - visibleCards ? 'none' : 'auto';\n            }\n\n            function slideToCard(index) {\n                if (index < 0) index = 0;\n                if (index > cursosCards.length - visibleCards) index = cursosCards.length - visibleCards;\n                \n                cursosCurrentPos = index;\n                \n                const cardWidth = cursosCards[0].offsetWidth;\n                const gap = 24;\n                const scrollPosition = index * (cardWidth + gap);\n                \n                tab.scrollTo({\n                    left: scrollPosition,\n                    behavior: 'smooth'\n                });\n                \n                updateNavButtons();\n            }\n\n            function recenterWithDelay() {\n                if (tab.classList.contains('active')) {\n                    updateVisibleCards();\n                    setTimeout(() => slideToCard(cursosCurrentPos), 100);\n                }\n            }\n\n            sliderUpdaters[tab.id] = recenterWithDelay;\n\n            window.addEventListener('resize', recenterWithDelay);\n\n            prevBtnCursos.addEventListener('click', () => {\n                slideToCard(cursosCurrentPos - visibleCards);\n            });\n\n            nextBtnCursos.addEventListener('click', () => {\n                slideToCard(cursosCurrentPos + visibleCards);\n            });\n            \n            updateVisibleCards();\n        }\n    });\n    \n    // ===== CAPACITACIÃ“N TABS FUNCTIONALITY =====\n    const tabButtons = document.querySelectorAll('.tab-button');\n    const sectionDescriptions = document.querySelectorAll('#section-description-container p');\n    \n    // Set IA tab as active by default\n    const initialTabContent = document.getElementById('ia-content');\n    const initialTabButton = document.querySelector('[data-target=\"ia\"]');\n    if (initialTabButton) {\n        initialTabButton.classList.add('active');\n    }\n    if (initialTabContent) {\n        initialTabContent.classList.add('active');\n    }\n\n    // Initial centering for the first active tab's slider\n    if (initialTabContent && sliderUpdaters[initialTabContent.id]) {\n        sliderUpdaters[initialTabContent.id]();\n    }\n\n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            if (button.classList.contains('active')) return;\n\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            cursosTabContents.forEach(content => content.classList.remove('active'));\n            \n            button.classList.add('active');\n            const targetId = button.getAttribute('data-target');\n            const contentId = `${targetId}-content`;\n            const contentElement = document.getElementById(contentId);\n            if (contentElement) {\n                contentElement.classList.add('active');\n            }\n            \n            if (sliderUpdaters[contentId]) {\n                sliderUpdaters[contentId]();\n            }\n        });\n    });\n    \n    // ===== ANIMATIONS ON SCROLL =====\n    const animateOnScroll = function() {\n        const elements = document.querySelectorAll('.animate-on-scroll');\n        \n        elements.forEach(element => {\n            const elementPosition = element.getBoundingClientRect().top;\n            const screenPosition = window.innerHeight / 1.2;\n            \n            if (elementPosition < screenPosition) {\n                element.classList.add('appear');\n            }\n        });\n    };\n    \n    // Run on page load\n    animateOnScroll();\n    \n    // Run on scroll\n    window.addEventListener('scroll', animateOnScroll);\n    \n    // Initialize feather icons after DOM changes\n    setTimeout(() => {\n        if (typeof feather !== 'undefined') {\n            feather.replace();\n        }\n    }, 100);\n});"